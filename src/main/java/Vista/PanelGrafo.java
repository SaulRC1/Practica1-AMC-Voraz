/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package Vista;

import Modelo.Nodo;
import Modelo.Punto;
import java.awt.Color;
import java.awt.Dimension;
import java.awt.Graphics;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.Iterator;

/**
 *
 * @author SaulRC1
 */
public class PanelGrafo extends javax.swing.JPanel {

    /**
     * Creates new form PanelGrafo
     */
    private HashMap<Nodo, ArrayList<Nodo>> Dijkstra = null;

    /**
     * Creates new form PanelPuntos
     */
    public PanelGrafo() {
        setPreferredSize(new Dimension(6000, 6000));
        initComponents();
        this.setBackground(Color.white);

    }

    @Override
    public void paintComponent(Graphics g) {

        super.paintComponent(g);

        g.setColor(Color.black);
        
        int n = 0;

        if (this.Dijkstra != null) {

            Iterator entries = Dijkstra.entrySet().iterator();
            while (entries.hasNext()) {
                HashMap.Entry entry = (HashMap.Entry) entries.next();
                Nodo key = (Nodo) entry.getKey();
                ArrayList<Nodo> aux = (ArrayList<Nodo>) entry.getValue();
                
                //Pintamos Nodos
                g.drawOval((int)key.getP().getX(), (int)key.getP().getY(), 30, 30);
                g.drawString(key.getP().getX() + "," + key.getP().getY(), (int)key.getP().getX(), (int)key.getP().getY());
                
                //Pintamos Arista
                for (int i = 0; i < aux.size(); i++) {
                    g.drawLine((int)key.getP().getX(), (int)key.getP().getY(), (int)aux.get(i).getP().getX(), (int)aux.get(i).getP().getY());
                }
                n++;
                
                
            }

        }
        
        System.out.println(n);

    }

    @Override
    public void update(Graphics g) {
        paint(g);
    }

    public void cargarSolucion(HashMap<Nodo, ArrayList<Nodo>> Dijkstra) {
        this.Dijkstra = Dijkstra;
        repaint();
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(this);
        this.setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 400, Short.MAX_VALUE)
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 300, Short.MAX_VALUE)
        );
    }// </editor-fold>//GEN-END:initComponents


    // Variables declaration - do not modify//GEN-BEGIN:variables
    // End of variables declaration//GEN-END:variables
}
